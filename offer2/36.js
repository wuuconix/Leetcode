/**
 * 剑指 Offer II 036. 后缀表达式
 * 中等
 * 根据 逆波兰表示法，求该后缀表达式的计算结果。

有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。
 
说明：

整数除法只保留整数部分。
给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。
 
示例 1：

输入：tokens = ["2","1","+","3","*"]
输出：9
解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9
示例 2：

输入：tokens = ["4","13","5","/","+"]
输出：6
解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6
示例 3：

输入：tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
输出：22
解释：
该算式转化为常见的中缀算术表达式为：
  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22
 

提示：

1 <= tokens.length <= 104
tokens[i] 要么是一个算符（"+"、"-"、"*" 或 "/"），要么是一个在范围 [-200, 200] 内的整数
 

逆波兰表达式：

逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。

平常使用的算式则是一种中缀表达式，如 ( 1 + 2 ) * ( 3 + 4 ) 。
该算式的逆波兰表达式写法为 ( ( 1 2 + ) ( 3 4 + ) * ) 。
逆波兰表达式主要有以下两个优点：

去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。
适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。
 * @param {string[]} tokens
 * @return {number}
 * 这道题最后给的提示很关键。逆波兰式非常适用于用栈来实现。
 * 如果是数字，那就直接入栈，如果是运算符，那么就弹出两个数字，第一个弹出的是右操作数，第二个弹出的是左操作数
 * 然后将运算的结果继续入栈。
 * 运算的方式我用eval来实现了。
 * 这里要注意最好对两个操作数都带上括号，不然 eval 在遇到 3--2这种表达式时会报错，用(3)-(-2)它就能理解。
 * 然后这里的除法要求去掉小数只表六整数，我们不能用floor，不然 -0.1会被取为 -1。】
 * 我们应该使用parseInt来直接保留整数而去掉小数。
 * 164 ms 5.51%
 * 51.5 MB 5.12% 
 */
var evalRPN = function(tokens) {
    let stack = []
    for (let token of tokens) {
        if (["+", "-", "*", "/"].includes(token)) {
            let right = stack.pop()
            let left = stack.pop()
            let result = parseInt(eval(`(${left})${token}(${right})`))
            console.log(`(${left})${token}(${right})=${result}`)
            stack.push(result)
        } else {
            stack.push(token)
        }
    }
    return stack.pop()
};

let tokens = ["4","-2","/","2","-3","-","-"]
evalRPN(tokens)