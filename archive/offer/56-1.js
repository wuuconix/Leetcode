/**
 * 剑指 Offer 56 - I. 数组中数字出现的次数
 * 中等
 * 一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。

示例 1：
输入：nums = [4,1,4,6]
输出：[1,6] 或 [6,1]

示例 2：
输入：nums = [1,2,10,4,1,4,3,3]
输出：[2,10] 或 [10,2]
 

限制：
2 <= nums.length <= 10000
 * @param {number[]} nums
 * @return {number[]}
 * 这道题没啥思路，看了k神的题解。
 * 发现可以用亦或这个位运算。假如这道题只让我们求 一个出现过1次的数，其他的数都出现过两次。
 * 我们可以用亦或运算，全部亦或一遍，最后的结果就是所求。因为两个相同的数亦或后是零，起到了消掉的作用。
 * 而这道题有两个数只出现了一次，我们全部亦或一遍后实际上得到的结果是 x ^ y
 * 我们需要把数组分成两部分，这样就能再各自亦或求出x和y。
 * 而划分的依据可以根据 x ^ y之间差距的标志位。即1
 * 64 ms 85.58%
 * 43.2 MB 55.21%
 */
var singleNumbers = function(nums) {
    let n = 0, m = 1, x = 0, y = 0
    for (let num of nums) //将数组中的元素全部亦或。最后的结果实际上就是 x ^ y。x和y就是两个出现过一次的数
        n ^= num
    while (!(n & m)) //寻找x和y之间的差距位
        m <<= 1
    for (let num of nums) {
        if (num & m) //标志位为1的元素，划入 1 族
            x ^= num
        else //0族
            y ^= num
    }
    return [x, y]
};