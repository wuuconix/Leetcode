//贪心法。数学可以证明把绳子尽可能分成长度为3的小段，这时候乘机最大。因为3离e 2.718最近。
//但是n = 4的时候应该取 2 * 2或者直接取4。不能取为3 * 1。其他的情况都取出3就行了。
// 56 ms 89.05%
// 41.3 MB 24.67%

/**
 * 剑指 Offer 14- II. 剪绳子 II
 * 给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m - 1] 。请问 k[0]*k[1]*...*k[m - 1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。
    答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
    2 <= n <= 1000
 * @param {number} n
 * @return {number}
 * 和 14-1.js 一样，但是 n 的上限到达了1000。
 * 利用动态规划可能会超时，而贪心没有这个问题
 */
var cuttingRope = function(n) {
    if (n < 4)
        return n - 1
    let ans = 1
    while (n > 4) {
        n -= 3
        ans *= 3
        ans %= 1000000007
    }
    return (ans * n) % 1000000007
};
console.log(cuttingRope(58)); 