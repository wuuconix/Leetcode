/**
 * 剑指 Offer II 003. 前 n 个数字二进制中 1 的个数
 * 简单
 * 给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。

示例 1:

输入: n = 2
输出: [0,1,1]
解释: 
0 --> 0
1 --> 1
2 --> 10
示例 2:

输入: n = 5
输出: [0,1,1,2,1,2]
解释:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 
说明 :

0 <= n <= 105
 
进阶:

给出时间复杂度为 O(n*sizeof(integer)) 的解答非常容易。但你可以在线性时间 O(n) 内用一趟扫描做到吗？
要求算法的空间复杂度为 O(n) 。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount ）来执行此操作。
 * @param {number} n
 * @return {number[]}
 * 题目要求时间复杂度为O(n)，所以我们遍历+转为二级制然后统计1的个数这种救济暴力美学的做法就不行了。
 * 为了实现O(n)，我们需要找规律。我们很快能够发现这里可以用动态规划，因为 7 的 111 ，即3个1明显可以由 4 的 11 再加上一个1得来。
 * 所以我们维护一个dp数组即可，正巧，题目要求返回这个数组，所以这个dp数组就是答案。最后直接返回即可。
 * 88 ms 52.91%
 * 48.6 MB 18.82%
 */
var countBits = function(n) {
    if (n == 0)
        return [0]
    let dp = [0, 1] //记录每个数组二进制中1的个人
    let power = 1
    for (let i = 2; i <= n; i++) {
        if (i == 2 ** power) { //2的指数的二进制都只有一个1，比如 1  10 100 1000 10000
            dp[i] = 1
            power++
        } else {
            dp[i] = 1 + dp[i - 2 ** (power - 1)] //例子 dp[7] = 1 + dp[3]   7的二进制为 111   3的二进制为 011，他们只差开头的1，所以可以东来动态规划
        }
    }
    return dp
};

let n = 8
console.log(countBits(n));
