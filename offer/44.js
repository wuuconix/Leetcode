/**
 * 剑指 Offer 44. 数字序列中某一位的数字
 * 中等
 * 数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。
    请写一个函数，求任意第n位对应的数字。

    示例 1：

    输入：n = 3
    输出：3
    示例 2：

    输入：n = 11
    输出：0
     
    限制：

    0 <= n < 2^31
 * @param {number} n
 * @return {number}
 * 这和之前的求1个数，即43的困难题类似。
 * 做出这种题的关键是找规律，可以先从宏观上找，即抽象得看不同位数之间的规律。
 * 然后具体求具体值得答案。
 * 题目给了n，让我们求对应n上的值，
 * 我们先确定n这个位置上是几位数的。
 * 因为 1位数的base是0.
 * 2位数的base是 10
 * 3位数的base 是 10 + 2 * 90 = 190
 * 所以我们可以通过  它在  r[i - 1] 和 r[i] 之前确定它是几位数。
 * 确定几位数后，再确定它具体的值，具体可以通过它和 r[i - 1]之间的偏移确定。
 * 确定它是几位数后，再确定他在这个数中的index，即它是第几位，用求余运算即可。
 * 56 ms 92.68%
 * 40.8MB
 */
var findNthDigit = function(n) {
    if (n >= 0 && n <= 9)
        return n.toString()
    let pre = 0, cur = 10, len = 0
    for (let i = 2; i <= 32; i++) { //计算n位置的数属于几位数
        pre = cur
        cur = cur + i * 9 * 10 ** (i - 1)
        if (n >= pre && n < cur) {
            len = i
            break
        }
    }
    let num = 10 ** (len - 1) + Math.floor((n - pre) / len) //计算出具体的数是几
    return num.toString()[(n - pre) % len]
};

console.log(findNthDigit(191));